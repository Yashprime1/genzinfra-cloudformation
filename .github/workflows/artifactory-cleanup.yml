name: Artifactory Container Cleanup Analysis

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (only analyze, do not delete)'
        required: false
        default: 'true'
        type: boolean
      component_name:
        description: 'Component name to analyze'
        required: true
        default: 'dashboard'
        type: string
      months_threshold:
        description: 'Months threshold for cleanup candidates'
        required: false
        default: '12'
        type: string

env:
  ARTIFACTORY_URL: "https://artifactory.clevertap.net"
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_TOKEN }}
  COMPONENT_NAME: ${{ github.event.inputs.component_name }}
  MONTHS_THRESHOLD: ${{ github.event.inputs.months_threshold }}
  VALUES_JSON_PATH: "values.json"  # Adjust path as needed

jobs:
  analyze-containers:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Infra-Actions Repository
      uses: actions/checkout@v3
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install requests python-dateutil

    - name: Run container analysis
      run: |
        python scripts/artifactory/analyze_containers.py

    - name: Execute cleanup commands
      if: ${{ github.event.inputs.dry_run == 'false' }}
      run: |
        echo "🚀 Executing cleanup commands (dry_run is false)..."
        
        # Find the most recent cleanup commands file
        CLEANUP_SCRIPT=$(find . -name "cleanup_commands_*.sh" -type f | sort -r | head -1)
        
        if [ -n "$CLEANUP_SCRIPT" ] && [ -f "$CLEANUP_SCRIPT" ]; then
          echo "Found cleanup script: $CLEANUP_SCRIPT"
          
          # Make the script executable
          chmod +x "$CLEANUP_SCRIPT"
          
          # Count commands to be executed
          COMMAND_COUNT=$(grep -c "curl.*DELETE" "$CLEANUP_SCRIPT" 2>/dev/null || echo "0")
          echo "Number of deletion commands to execute: $COMMAND_COUNT"
          
          if [ "$COMMAND_COUNT" -gt 0 ]; then
            echo "Executing cleanup commands..."
            
            # Execute the cleanup script
            bash "$CLEANUP_SCRIPT"
            
            echo "✅ Cleanup execution completed"
            echo "CLEANUP_EXECUTED=true" >> $GITHUB_ENV
            echo "COMMANDS_EXECUTED=$COMMAND_COUNT" >> $GITHUB_ENV
          else
            echo "ℹ️ No cleanup commands found to execute"
            echo "CLEANUP_EXECUTED=false" >> $GITHUB_ENV
            echo "COMMANDS_EXECUTED=0" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ No cleanup commands script found"
          echo "CLEANUP_EXECUTED=false" >> $GITHUB_ENV
          echo "COMMANDS_EXECUTED=0" >> $GITHUB_ENV
        fi

    - name: Upload all cleanup artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-analysis-results
        path: |
          cleanup_commands_*.sh
          cleanup_summary_*.csv
        retention-days: 30

    - name: Create summary comment
      run: |
        # Count cleanup candidates from the most recent cleanup report
        CLEANUP_COUNT=$(find . -name "cleanup_report_*.json" -type f -exec jq '.summary.total_cleanup_candidates' {} \; | head -1 2>/dev/null || echo "0")
        TOTAL_ANALYZED=$(find . -name "cleanup_report_*.json" -type f -exec jq '.summary.total_images' {} \; | head -1 2>/dev/null || echo "0")
        
        echo "## Artifactory Container Cleanup Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Analysis Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Component Analyzed:** ${{ github.event.inputs.component_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run Mode:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Images Analyzed:** $TOTAL_ANALYZED" >> $GITHUB_STEP_SUMMARY
        echo "- **Cleanup Candidates Found:** $CLEANUP_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add execution status if cleanup was attempted
        if [ "${{ github.event.inputs.dry_run }}" = "false" ]; then
          echo "### Cleanup Execution Status" >> $GITHUB_STEP_SUMMARY
          if [ "${CLEANUP_EXECUTED:-false}" = "true" ]; then
            echo "- **Status:** ✅ Cleanup executed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Commands Executed:** ${COMMANDS_EXECUTED:-0}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ⚠️ No cleanup commands executed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # List generated files
        echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
        echo "The following files were generated and uploaded as artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        for file in cleanup_report_*.json cleanup_*_*.json cleanup_commands_*.sh cleanup_summary_*.csv; do
          if [ -f "$file" ]; then
            echo "- **$file**" >> $GITHUB_STEP_SUMMARY
          fi
        done
        echo "" >> $GITHUB_STEP_SUMMARY
