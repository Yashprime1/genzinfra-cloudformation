name: AWS Nuke Account

run-name: AWS Nuke - ${{ inputs.AWS_ACCOUNT_ID }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      AWS_ACCOUNT_ID:
        type: string
        description: AWS Account ID to nuke
        required: true
      AWS_ACCESS_KEY_ID:
        type: string
        description: AWS Access Key ID (will be masked)
        required: true
      AWS_SECRET_ACCESS_KEY:
        type: string
        description: AWS Secret Access Key (will be masked)
        required: true
      CONFIRM_NUKE:
        type: boolean
        description: I understand this will DELETE ALL RESOURCES in the specified AWS account
        required: true
        default: false

env:
  AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}

jobs:
  aws-nuke:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Mask Credentials
        run: |
          AWS_ACCESS_KEY_ID=$(jq -r '.inputs.AWS_ACCESS_KEY_ID' $GITHUB_EVENT_PATH)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.inputs.AWS_SECRET_ACCESS_KEY' $GITHUB_EVENT_PATH)
          echo ::add-mask::$AWS_ACCESS_KEY_ID
          echo ::add-mask::$AWS_SECRET_ACCESS_KEY
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $GITHUB_ENV

      - name: Validate Inputs
        run: |
          echo "Validating inputs..."
          
          # Mask sensitive inputs
          echo "::add-mask::${{ inputs.AWS_ACCESS_KEY_ID }}"
          echo "::add-mask::${{ inputs.AWS_SECRET_ACCESS_KEY }}"
          
          # Check if confirmation is provided
          if [ "${{ inputs.CONFIRM_NUKE }}" != "true" ]; then
            echo "ERROR: You must confirm that you understand this will DELETE ALL RESOURCES"
            echo "Please set 'CONFIRM_NUKE' to true to proceed"
            exit 1
          fi
          
          # Validate AWS Account ID format
          if [[ ! "${{ inputs.AWS_ACCOUNT_ID }}" =~ ^[0-9]{12}$ ]]; then
            echo "ERROR: Invalid AWS Account ID format. Must be 12 digits."
            exit 1
          fi
          
          # Check if credentials are provided
          if [ -z "${{ inputs.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ inputs.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "ERROR: AWS Access Key ID and Secret Access Key are required"
            exit 1
          fi
          
          echo "Input validation passed"
   
      - name: Verify AWS Credentials
        run: |
          aws sts get-caller-identity
          CALLER_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          if [ "$CALLER_ACCOUNT" != "${{ inputs.AWS_ACCOUNT_ID }}" ]; then
            echo "ERROR: Credentials are for account $CALLER_ACCOUNT, but you specified ${{ inputs.AWS_ACCOUNT_ID }}"
            exit 1
          fi
          echo "AWS credentials verified for account $CALLER_ACCOUNT"

      - name: Download AWS Nuke Tool
        run: |
          wget -c https://github.com/rebuy-de/aws-nuke/releases/download/v2.25.0/aws-nuke-v2.25.0-linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local/bin
          sudo mv /usr/local/bin/aws-nuke-v2.25.0-linux-amd64 /usr/local/bin/aws-nuke
          sudo chmod +x /usr/local/bin/aws-nuke
          aws-nuke version

      - name: Update Config File with Account ID
        run: |
          echo "Updating config file for account ${{ inputs.AWS_ACCOUNT_ID }}..."        
          sed -i "s/AWS_ACCOUNT_ID_PLACEHOLDER/${{ inputs.AWS_ACCOUNT_ID }}/g" aws-nuke-config.yaml
          echo "Config file updated for account ${{ inputs.AWS_ACCOUNT_ID }}"
        
      - name: List Resources to be Deleted
        run: |
          echo "Listing resources that will be deleted (dry-run)..."
          aws-nuke --config aws-nuke-config.yaml --access-key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY} --force > resources-before.txt 2>&1 || true
          echo "Resources before nuke:"
          cat resources-before.txt
          
          # Extract counts from dry-run output
          if grep -q "Scan complete:" resources-before.txt; then
            TOTAL_BEFORE=$(grep "Scan complete:" resources-before.txt | grep -o '[0-9]* total' | grep -o '[0-9]*')
            NUKEABLE_BEFORE=$(grep "Scan complete:" resources-before.txt | grep -o '[0-9]* nukeable' | grep -o '[0-9]*')
            FILTERED_BEFORE=$(grep "Scan complete:" resources-before.txt | grep -o '[0-9]* filtered' | grep -o '[0-9]*')
            echo "BEFORE: $TOTAL_BEFORE total, $NUKEABLE_BEFORE nukeable, $FILTERED_BEFORE filtered"
          fi
          
      - name: Execute AWS Nuke
        run: |
          echo "EXECUTING AWS NUKE"
          echo "Account: ${{ inputs.AWS_ACCOUNT_ID }}"
          echo "Timestamp: $(date)"
          
          aws-nuke \
            --config aws-nuke-config.yaml \
            --access-key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY} \
            --no-dry-run \
            --force
          
          echo "AWS Nuke execution completed"

      - name: Verify Account is Clean
        if: always()
        run: |
          echo "Verifying account is clean..."
          
          # List resources after nuke (dry-run)
          echo "Listing resources after nuke (dry-run)..."
          aws-nuke --config aws-nuke-config.yaml --access-key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY} --force > resources-after.txt 2>&1 || true
          echo "Resources after nuke:"
          cat resources-after.txt
          
          # Extract counts from after dry-run output
          if grep -q "Scan complete:" resources-after.txt; then
            TOTAL_AFTER=$(grep "Scan complete:" resources-after.txt | grep -o '[0-9]* total' | grep -o '[0-9]*')
            NUKEABLE_AFTER=$(grep "Scan complete:" resources-after.txt | grep -o '[0-9]* nukeable' | grep -o '[0-9]*')
            FILTERED_AFTER=$(grep "Scan complete:" resources-after.txt | grep -o '[0-9]* filtered' | grep -o '[0-9]*')
            echo "AFTER: $TOTAL_AFTER total, $NUKEABLE_AFTER nukeable, $FILTERED_AFTER filtered"
          fi
          
          # Compare before and after
          echo ""
          echo "=== COMPARISON ==="
          if [ -f resources-before.txt ] && [ -f resources-after.txt ]; then
            if grep -q "Scan complete:" resources-before.txt && grep -q "Scan complete:" resources-after.txt; then
              echo "BEFORE: $TOTAL_BEFORE total, $NUKEABLE_BEFORE nukeable, $FILTERED_BEFORE filtered"
              echo "AFTER:  $TOTAL_AFTER total, $NUKEABLE_AFTER nukeable, $FILTERED_AFTER filtered"
              
              echo ""
              echo "=== SUMMARY ==="
              DELETED_TOTAL=$((TOTAL_BEFORE - TOTAL_AFTER))
              DELETED_NUKEABLE=$((NUKEABLE_BEFORE - NUKEABLE_AFTER))
              
              echo "Resources deleted: $DELETED_TOTAL total ($DELETED_NUKEABLE nukeable)"
              echo "Resources remaining: $TOTAL_AFTER total ($NUKEABLE_AFTER nukeable)"
              
              if [ "$TOTAL_AFTER" -eq 0 ]; then
                echo "SUCCESS: All resources have been deleted!"
              elif [ "$NUKEABLE_AFTER" -eq 0 ]; then
                echo "SUCCESS: All nukeable resources have been deleted!"
                echo "NOTE: $FILTERED_AFTER filtered resources remain (these are protected by config)"
              else
                echo "WARNING: $NUKEABLE_AFTER nukeable resources still exist"
                echo "These resources may have dependencies or protection enabled"
              fi
            else
              echo "Could not parse scan results from before/after files"
            fi
          else
            echo "Could not perform comparison - missing before/after files"
          fi

      - name: Create Summary Report
        if: always()
        run: |
          echo "## AWS Nuke Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Account ID:** ${{ inputs.AWS_ACCOUNT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Access Key ID:** ${AWS_ACCESS_KEY_ID:0:4}****${AWS_ACCESS_KEY_ID: -4}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "Success" >> $GITHUB_STEP_SUMMARY
            echo "AWS Nuke execution completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "Failed" >> $GITHUB_STEP_SUMMARY
            echo "AWS Nuke execution failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
