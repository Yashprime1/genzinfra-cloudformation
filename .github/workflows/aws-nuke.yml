name: aws/Nuke-Account

run-name: aws/Nuke-Account-${{ inputs.AWS_ACCOUNT_ID }}-${{ github.run_number }}

on:
  workflow_dispatch:
    inputs:
      AWS_ACCOUNT_ID:
        type: string
        description: AWS Account ID to nuke
        required: true
      AWS_ACCESS_KEY_ID:
        type: string
        description: AWS Access Key ID (will be masked)
        required: true
      AWS_SECRET_ACCESS_KEY:
        type: string
        description: AWS Secret Access Key (will be masked)
        required: true
      AWS_SESSION_TOKEN:
        type: string
        description: AWS Session Token (will be masked) - Required for temporary credentials
        required: false

env:
  AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      caller-account: ${{ steps.verify.outputs.caller-account }}
      caller-user: ${{ steps.verify.outputs.caller-user }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask credentials
        run: |
          AWS_ACCESS_KEY_ID=$(jq -r '.inputs.AWS_ACCESS_KEY_ID' $GITHUB_EVENT_PATH)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.inputs.AWS_SECRET_ACCESS_KEY' $GITHUB_EVENT_PATH)
          AWS_SESSION_TOKEN=$(jq -r '.inputs.AWS_SESSION_TOKEN' $GITHUB_EVENT_PATH)
          echo ::add-mask::$AWS_ACCESS_KEY_ID
          echo ::add-mask::$AWS_SECRET_ACCESS_KEY
          echo ::add-mask::$AWS_SESSION_TOKEN
          echo AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN >> $GITHUB_ENV
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $GITHUB_ENV

      - name: Validate that supplied credentials belong to the account that is to be nuked
        id: verify
        run: |
          aws sts get-caller-identity
          CALLER_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          CALLER_USER=$(aws sts get-caller-identity --query Arn --output text)
          echo "caller-account=$CALLER_ACCOUNT" >> $GITHUB_OUTPUT
          echo "caller-user=$CALLER_USER" >> $GITHUB_OUTPUT
          if [ "$CALLER_ACCOUNT" != "${{ inputs.AWS_ACCOUNT_ID }}" ]; then
            echo "ERROR: Credentials mismatch. Supplied credentails are for $CALLER_ACCOUNT, but account selected to nuke is ${{ inputs.AWS_ACCOUNT_ID }}"
            exit 1
          fi
          echo "AWS credentials verified for account $CALLER_ACCOUNT"
          echo "AWS User: $CALLER_USER"

  approval:
    runs-on: ubuntu-latest
    needs: validate
    environment: wait-for-approval
    steps:
      - name: Approval required
        run: |
          echo "AWS Account ID: ${{ inputs.AWS_ACCOUNT_ID }}"
          echo "AWS User: ${{ needs.validate.outputs.caller-user }}"
          echo "Are you sure you want to delete all resources in account ${{ inputs.AWS_ACCOUNT_ID }}?"
         
  execute:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    needs: [validate, approval]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download aws-nuke
        run: |
          wget -c https://github.com/ekristen/aws-nuke/releases/download/v3.59.1/aws-nuke-v3.59.1-linux-amd64.tar.gz -O - | tar -xz -C /usr/local/bin
          chmod +x /usr/local/bin/aws-nuke
          aws-nuke version

      - name: Mask credentials
        run: |
          AWS_ACCESS_KEY_ID=$(jq -r '.inputs.AWS_ACCESS_KEY_ID' $GITHUB_EVENT_PATH)
          AWS_SECRET_ACCESS_KEY=$(jq -r '.inputs.AWS_SECRET_ACCESS_KEY' $GITHUB_EVENT_PATH)
          AWS_SESSION_TOKEN=$(jq -r '.inputs.AWS_SESSION_TOKEN' $GITHUB_EVENT_PATH)
          echo ::add-mask::$AWS_ACCESS_KEY_ID
          echo ::add-mask::$AWS_SECRET_ACCESS_KEY
          if [ "$AWS_SESSION_TOKEN" != "null" ] && [ -n "$AWS_SESSION_TOKEN" ]; then
            echo ::add-mask::$AWS_SESSION_TOKEN
            echo AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN >> $GITHUB_ENV
          fi
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $GITHUB_ENV
  
      - name: Install yq
        run: |
          wget -c https://github.com/mikefarah/yq/releases/download/v4.47.2/yq_linux_amd64.tar.gz -O - | tar -xz -C /usr/local/bin
          mv /usr/local/bin/yq_linux_amd64 /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Update config file with account ID
        run: |
          ACCOUNT_ID="${{ inputs.AWS_ACCOUNT_ID }}"
          yq eval "with(.accounts; .[\"$ACCOUNT_ID\"] = .[\"AWS_ACCOUNT_ID_PLACEHOLDER\"] | del(.[\"AWS_ACCOUNT_ID_PLACEHOLDER\"]))" aws-nuke-config.yaml -i
          echo "Config file updated for account ${{ inputs.AWS_ACCOUNT_ID }}"
        
      - name: Execute AWS Nuke
        run: |
          echo "Fire in the hole!"
          echo "AWS Account: ${{ inputs.AWS_ACCOUNT_ID }}"
          echo "AWS User: ${{ needs.validate.outputs.caller-user }}"
          echo "Timestamp: $(date)"
          
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"       
            if aws-nuke \
              --config aws-nuke-config.yaml \
              --access-key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY} \
              --session-token ${AWS_SESSION_TOKEN} \
              --no-dry-run \
              --force; then
              echo "AWS Nuke execution completed successfully on attempt $((RETRY_COUNT + 1))"
              exit 0
            else
              EXIT_CODE=$?
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "AWS Nuke failed with exit code $EXIT_CODE on attempt $RETRY_COUNT"            
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Retrying"
              fi
            fi
          done
